---
# tasks file for kvm_spawn
- name: Get VMs list
  community.libvirt.virt:
    command: list_vms
  register: existing_vms
  changed_when: no

- name: Create tmporary directory to download base image
  file:
    path: "/tmp/images"
    state: directory

- name: Create VM if not exists
  block:
    - name: Download base image
      get_url:
        url: "{{ flavors[flavor].image_url }}"
        dest: "/tmp/images/{{ flavors[flavor].image_name }}"
        checksum: "sha256:{{ flavors[flavor].image_sha }}"
      when: flavor in flavors

    - name: Copy base image to libvirt directory
      copy:
        dest: "{{ libvirt_pool_dir }}/{{ vm_name }}.qcow2"
        src: "/tmp/images/{{ flavors[flavor].image_name }}"
        force: no
        remote_src: yes 
        # owner: "{{ user }}"
        # group: "{{ user }}"
        # mode: 0660
      register: copy_results

    - name: Configure the image
      command: |
        virt-customize -a {{ libvirt_pool_dir }}/{{ vm_name }}.qcow2 \
        --hostname {{ vm_name }} \
        --root-password password:{{ vm_root_password }} \
        --ssh-inject 'root:file:{{ ssh_key }}' \
        --uninstall cloud-init --selinux-relabel
      when: copy_results is changed

    - name: Define vm
      community.libvirt.virt:
        command: define
        xml: "{{ lookup('template', 'vm-template.xml.j2') }}"
      when: "vm_name not in existing_vms.list_vms"

- name: Ensure VM is started
  community.libvirt.virt:
    name: "{{ vm_name }}"
    state: running
  register: vm_start_results
  until: vm_start_results is success
  retries: 15
  delay: 2

- name: Ensure temporary file is deleted
  file:
    path: "/tmp/images/{{ flavors[flavor].image_name }}"
    state: absent
  when: cleanup_tmp | bool
